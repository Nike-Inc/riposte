// ========== GRADLE PLUGINS / REPOSITORIES SETUP
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'project-report'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: classes) {
        classifier = 'javadoc'
        from javadoc
    }

    javadoc {
        failOnError = false
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    repositories {
        mavenCentral()
    }

    idea {
        module {
            downloadSources = true
        }
    }

    test {
        // Needed for spock tests to run when in combo junit 4/5 mode.
        useJUnitPlatform()

        // Travis CI appears to have some resource constraint issues. Make sure tests have enough memory.
        maxHeapSize = "1024m"
        maxParallelForks = 1

        // Minimize console spam while running tests without swallowing critical debugging info.
        testLogging {
            exceptionFormat "FULL"
            events "passed", "skipped", "failed"
            displayGranularity = 0
            showExceptions true
            showCauses true
            showStackTraces true
        }

        ignoreFailures = false
    }

    //http://www.gradle.org/docs/current/userguide/java_plugin.html
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Disable jar, sourcesJar, and javadoc tasks for the root project - we only want them to run for submodules
jar.enabled = false
sourcesJar.enabled = false
javadocJar.enabled = false

// ========== PROPERTIES FOR GRADLE BUILD - DEPENDENCY VERSIONS / ETC
ext {
    // DEPENDENCY VERSIONS
    // Core and multi-module dependencies
    nettyVersion = '4.1.49.Final'
    slf4jVersion = '1.7.30'
    jetbrainsAnnotationsVersion = '19.0.0'
    jacksonVersion = '2.11.0'
    wingtipsVersion = '0.23.0'
    backstopperVersion = '0.13.0'
    fastbreakVersion = '0.10.3'

    // Misc module dependencies
    ningAsyncHttpClientVersion = '1.9.40'
    asyncHttpClientVersion = '2.12.1'
    servletApiVersion = '3.1.0'
    guiceVersion = '4.2.3'
    codahaleMetricsVersion = '4.1.6'
    signalFxCodahaleVersion = '1.0.3'
    eurekaClientVersion = '1.9.21'
    archaiusVersion = '0.7.7'
    apacheCommonsConfigurationVersion = '1.8'
    typesafeConfigVersion = '1.4.0'

    // ====== Test dependencies
    junit5Version = '5.6.2'
    junitVersion = '4.13'
    junitDataproviderVersion = '1.13.1'
    assertJVersion = '3.15.0'
    mockitoVersion = '3.3.3'
    restAssuredVersion = '4.3.0'
    slf4jTestVersion = '1.2.0'
    logbackVersion = '1.2.3'

    spockVersion = '2.0-M2-groovy-3.0'
    cgLibVersion = '3.3.0'
    objenesisVersion = '3.1'
    groovyVersion = '3.0.3'

    apacheCommonsIoVersion = '2.6'
    apacheCommonsCodecVersion = '1.14'

    // JACOCO PROPERTIES
    jacocoToolVersion = '0.8.5'
    // Anything in this jacocoExclusions list will be excluded from coverage reports. The format is paths to class
    //      files, with wildcards allowed. e.g.: jacocoExclusions = [ "com/nike/Foo.class", "**/Bar*.*" ]
    jacocoExclusions = []
    jacocoCoverageThresholdSetup = {
        configure(subprojects.findAll { isSubprojectIncludedInJacocoReports(it) }) {
            // Configure the minimum code coverage rules.
            jacocoTestCoverageVerification { JacocoCoverageVerification v ->
                violationRules {
                    rule { JacocoViolationRule r ->
                        enabled = true
                        limit {
                            minimum = 0.8
                            counter = "INSTRUCTION"
                        }

                    }

                    rule { JacocoViolationRule r ->
                        enabled = true
                        limit {
                            minimum = 0.5
                            counter = "BRANCH"
                        }
                    }
                }
            }
        }
    }
    // Configure which subprojects we're doing jacoco for.
    isSubprojectIncludedInJacocoReports = { Project subProj ->
        // For this repo we'll include everything that's not a sample.
        return !subProj.name.startsWith("sample")
    }
}

// ========== COMBO TEST REPORT - View the combined/merged report at: [project_root]/build/reports/tests/index.html
apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/junitComboTestReport.gradle')

// ========== JACOCO SETUP - View the combined/merged report at: [project_root]/build/reports/jacoco/jacocoRootReport/html/index.html.
//                           Individual reports for each submodule can be found at: [project_root]/[submodule]/build/reports/jacoco/test/html/index.html
apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/jacoco.gradle')
